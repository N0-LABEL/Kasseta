import discord
from discord.ext import commands
import asyncio
import yt_dlp as youtube_dl
import datetime
import random
import time
from typing import Optional, Dict, List
from concurrent.futures import ThreadPoolExecutor
import re
import aiohttp
from cachetools import TTLCache
import functools

# –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è 30 –º–∏–Ω—É—Ç)
search_cache = TTLCache(maxsize=200, ttl=1800)
track_cache = TTLCache(maxsize=100, ttl=3600)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
executor = ThreadPoolExecutor(max_workers=20)

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='?', intents=intents, help_command=None)

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
class ServerState:
    def __init__(self):
        self.queue = []
        self.current = None
        self.voice_client: Optional[discord.VoiceClient] = None
        self.current_volume = 1.0
        self.is_paused = False
        self.is_looping = False
        self.is_radio = False
        self.is_seeking = False
        self.start_time = 0
        self.last_playing_message = None
        self.nowplaying_updater = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
server_states: Dict[int, ServerState] = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
def get_server_state(guild_id: int) -> ServerState:
    if guild_id not in server_states:
        server_states[guild_id] = ServerState()
    return server_states[guild_id]

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
ytdl_format_options = {
    'format': 'bestaudio/best',
    'quiet': True,
    'no_warnings': True,
    'source_address': '0.0.0.0',
    'default_search': 'ytsearch',
    'noplaylist': True,
    'youtube_include_dash_manifest': False,
    'youtube_include_hls_manifest': False,
    'no_check_certificate': True,
    'geo_bypass': True,
    'nocheckcertificate': True,
    'ignoreerrors': True,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}

# –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ FFmpeg
ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -analyzeduration 0 -probesize 32 -threads 2',
    'options': '-vn -filter:a "volume=0.99"'
}

YTDL = youtube_dl.YoutubeDL(ytdl_format_options)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_duration(seconds):
    if seconds < 0:
        return "0:00"
    return str(datetime.timedelta(seconds=int(seconds))).split('.')[0]

def create_embed(title, description=None, color=0x4682B4):
    embed = discord.Embed(title=title, description=description, color=color)
    embed.set_footer(text="–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∫—É–ª—å—Ç—É—Ä—ã –í–§ | –ö–∞—Å—Å–µ—Ç–∞",
                     icon_url="https://github.com/N0-LABEL/Kasseta/blob/main/mkrf.png?raw=true")
    return embed

def create_progress_bar(position, duration, length=15):
    if duration <= 0:
        return ""
    progress = min(1, max(0, position / duration))
    filled = int(progress * length)
    return "[" + "‚ñ¨" * filled + "üîò" + "‚ñ¨" * (length - filled) + "]"

def is_playlist_url(url):
    return 'list=' in url or 'playlist?list=' in url

def is_valid_url(url):
    return url.startswith(('http://', 'https://', 'www.'))

async def extract_info_async(search, playlist=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
    cache_key = f"{'playlist_' if playlist else 'track_'}{search}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in search_cache:
        return search_cache[cache_key]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    options = ytdl_format_options.copy()
    options['noplaylist'] = not playlist

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º functools.partial –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        func = functools.partial(extract_info_sync, search, playlist)
        info = await loop.run_in_executor(executor, func)

        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if info:
            search_cache[cache_key] = info
            # –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Ç–∞–∫–∂–µ –∫—ç—à–∏—Ä—É–µ–º URL
            if not playlist and 'entries' not in info:
                track_url = info.get('url')
                if track_url:
                    track_cache[track_url] = info

        return info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

def extract_info_sync(search, playlist=False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
    options = ytdl_format_options.copy()
    options['noplaylist'] = not playlist

    # –î–ª—è URL –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if is_valid_url(search) and not playlist and search in track_cache:
        return track_cache[search]

    with youtube_dl.YoutubeDL(options) as ytdl:
        try:
            return ytdl.extract_info(search, download=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return None

def process_track(info):
    if 'entries' in info:
        info = info['entries'][0]

    return {
        'url': info['url'],
        'title': info['title'],
        'duration': info.get('duration', 0),
        'user': None
    }

async def add_to_queue(ctx, track):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
    state = get_server_state(ctx.guild.id)
    
    track['user'] = ctx.author
    state.queue.append(track)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    embed = create_embed(
        "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
        f"‚úÖ **{track['title']}** (`{format_duration(track['duration'])}`)\n–î–æ–±–∞–≤–∏–ª: {ctx.author.mention}"
    )

    await ctx.send(embed=embed)

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if not state.voice_client.is_playing() and not state.is_paused:
        await play_next(ctx)

async def play_next(ctx):
    state = get_server_state(ctx.guild.id)

    if state.nowplaying_updater:
        state.nowplaying_updater.cancel()
        state.nowplaying_updater = None

    if state.is_paused or state.is_seeking:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if state.is_looping and state.current:
        track = state.current
    elif state.queue:
        track = state.queue.pop(0)
    else:
        state.current = None
        state.is_radio = False
        await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", "–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."))
        return

    state.current = track
    url = track['url']
    title = track['title']
    user = track['user']
    duration = track.get('duration', 0)
    state.start_time = time.time()

    if not (state.is_looping and state.last_playing_message):
        progress_bar = create_progress_bar(0, duration)
        description = (
            f"üéµ **{title}**\n"
            f"{progress_bar}\n"
            f"`00:00 / {format_duration(duration)}`\n"
            f"–î–æ–±–∞–≤–∏–ª: {user.mention}"
        )
        state.last_playing_message = await ctx.send(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))

        if not state.nowplaying_updater:
            state.nowplaying_updater = asyncio.create_task(update_now_playing(ctx, state.last_playing_message, state))

    def after_playing(e):
        if not state.is_seeking and state.voice_client and state.voice_client.is_connected():
            asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop)

    try:
        source = discord.FFmpegPCMAudio(url, **ffmpeg_options)
        source = discord.PCMVolumeTransformer(source, volume=state.current_volume)
        if state.voice_client:
            state.voice_client.play(source, after=after_playing)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop)

async def update_now_playing(ctx, message, state):
    while state.current and state.voice_client and (state.voice_client.is_playing() or state.voice_client.is_paused()):
        try:
            position = time.time() - state.start_time if not state.is_paused else state.current.get('position', 0)
            duration = state.current.get('duration', 0)

            progress_bar = create_progress_bar(position, duration)
            description = (
                f"üéµ **{state.current['title']}**\n"
                f"{progress_bar}\n"
                f"`{format_duration(position)} / {format_duration(duration)}`\n"
                f"–î–æ–±–∞–≤–∏–ª: {state.current['user'].mention}"
            )

            await message.edit(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
            await asyncio.sleep(15)
        except:
            break

async def run_in_executor(func, *args):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(executor, func, *args)

async def add_playlist(ctx, search):
    state = get_server_state(ctx.guild.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç
    if not is_playlist_url(search):
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç! –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `?play`."
        ))

    try:
        info = await run_in_executor(extract_info_sync, search, True)

        if not info or 'entries' not in info or not info['entries']:
            return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"))

        tracks = []
        for entry in info['entries']:
            if not entry:
                continue
            track = process_track(entry)
            track['user'] = ctx.author
            tracks.append(track)

        for track in tracks:
            state.queue.append(track)

        await ctx.send(embed=create_embed(
            "–ü–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}\n"
            f"üéµ **{tracks[0]['title']}** - –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫\n"
            f"–î–æ–±–∞–≤–∏–ª: {ctx.author.mention}"
        ))

        if not state.voice_client.is_playing() and not state.is_paused:
            await play_next(ctx)

    except Exception as e:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç: {e}"))

# –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
@bot.event
async def on_ready():
    activity = discord.Activity(type=discord.ActivityType.listening, name="?help")
    await bot.change_presence(status=discord.Status.idle, activity=activity)
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

@bot.event
async def on_guild_remove(guild):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    if guild.id in server_states:
        state = server_states[guild.id]
        if state.voice_client and state.voice_client.is_connected():
            await state.voice_client.disconnect()
        del server_states[guild.id]

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.command()
async def about(ctx):
    await ctx.send(embed=create_embed(
        "–û –±–æ—Ç–µ",
        "üé∂ –ö–∞—Å—Å–µ—Ç–∞ ‚Äî —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å —à–∏—Ä–æ–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º. "
        "–£–º–µ–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º—É–∑—ã–∫—É —Å YouTube, –ø–ª–µ–π–ª–∏—Å—Ç—ã, –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å—é, "
        "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞.\n  \n**–°–¥–µ–ª–∞–Ω–æ –≤ –í–§**"
    ))

@bot.command()
async def ping(ctx):
    latency = round(bot.latency * 1000)
    await ctx.send(embed=create_embed("–ü–∏–Ω–≥", f"üì° {latency}ms"))

@bot.command()
async def play(ctx, *, search: str):
    state = get_server_state(ctx.guild.id)

    if is_valid_url(search) and is_playlist_url(search):
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –î–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `?playlist`."
        ))

    if state.is_radio:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏–æ –∫–æ–º–∞–Ω–¥–æ–π `?stop`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
        ))

    state.is_paused = False

    if not ctx.author.voice:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

    try:
        if not state.voice_client or not state.voice_client.is_connected():
            state.voice_client = await ctx.author.voice.channel.connect()
        elif state.voice_client.channel != ctx.author.voice.channel:
            await state.voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await ctx.send(embed=create_embed("–ó–∞–≥—Ä—É–∑–∫–∞", "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ..."))

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info = await extract_info_async(search, False)

        if not info:
            await loading_msg.edit(embed=create_embed("–û—à–∏–±–∫–∞", "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return

        track = process_track(info)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        await loading_msg.delete()
        await add_to_queue(ctx, track)

    except Exception as e:
        await loading_msg.edit(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫: {e}"))

@bot.command()
async def playlist(ctx, *, search: str):
    state = get_server_state(ctx.guild.id)

    # –ï—Å–ª–∏ —ç—Ç–æ URL, –Ω–æ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî —Å—Ä–∞–∑—É –æ—à–∏–±–∫–∞
    if is_valid_url(search) and not is_playlist_url(search):
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `?play`."
        ))

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–Ω–µ URL) ‚Äî —Ç–æ–∂–µ –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    elif not is_valid_url(search):
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–í—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `?play` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤."
        ))

    # –ï—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ ‚Äî –æ—à–∏–±–∫–∞
    if state.is_radio:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏–æ –∫–æ–º–∞–Ω–¥–æ–π `?stop`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
        ))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if not ctx.author.voice:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    try:
        if not state.voice_client or not state.voice_client.is_connected():
            state.voice_client = await ctx.author.voice.channel.connect()
        elif state.voice_client.channel != ctx.author.voice.channel:
            await state.voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    # –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º
    await ctx.send(embed=create_embed("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞", "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."))
    bot.loop.create_task(add_playlist(ctx, search))

@bot.command()
async def nowplaying(ctx):
    state = get_server_state(ctx.guild.id)

    try:
        await ctx.message.delete()
    except:
        pass

    if not state.current:
        return await ctx.send(embed=create_embed("–ü—É—Å—Ç–æ", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))

    if state.last_playing_message:
        try:
            position = time.time() - state.start_time if not state.is_paused else state.current.get('position', 0)
            duration = state.current.get('duration', 0)
            progress_bar = create_progress_bar(position, duration)
            description = (
                f"üéµ **{state.current['title']}**\n"
                f"{progress_bar}\n"
                f"`{format_duration(position)} / {format_duration(duration)}`\n"
                f"–î–æ–±–∞–≤–∏–ª: {state.current['user'].mention}"
            )
            await state.last_playing_message.edit(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
            return
        except:
            pass

    position = time.time() - state.start_time if not state.is_paused else state.current.get('position', 0)
    duration = state.current.get('duration', 0)
    progress_bar = create_progress_bar(position, duration)
    description = (
        f"üéµ **{state.current['title']}**\n"
        f"{progress_bar}\n"
        f"`{format_duration(position)} / {format_duration(duration)}`\n"
        f"–î–æ–±–∞–≤–∏–ª: {state.current['user'].mention}"
    )
    state.last_playing_message = await ctx.send(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))

    if not state.nowplaying_updater and state.voice_client and (state.voice_client.is_playing() or state.voice_client.is_paused()):
        state.nowplaying_updater = bot.loop.create_task(update_now_playing(ctx, state.last_playing_message, state))

@bot.command(name='queue')
async def queue_(ctx, page: int = 1):
    state = get_server_state(ctx.guild.id)
    
    if not state.queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))

    items_per_page = 10
    total_pages = max(1, (len(state.queue) + items_per_page - 1) // items_per_page)
    page = max(1, min(page, total_pages))

    start = (page - 1) * items_per_page
    end = start + items_per_page
    lines = []
    for i, song in enumerate(state.queue[start:end], start=start + 1):
        duration = format_duration(song.get('duration', 0))
        lines.append(f"**{i}.** [`{duration}`] {song['title']} - {song['user'].mention}")

    total_duration = sum(song.get('duration', 0) for song in state.queue)
    header = f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å | {len(state.queue)} —Ç—Ä–µ–∫–æ–≤ | {format_duration(total_duration)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    message = await ctx.send(embed=create_embed(header, "\n".join(lines), color=0xB0C4DE))

    if total_pages > 1:
        await message.add_reaction("‚¨ÖÔ∏è")
        await message.add_reaction("‚û°Ô∏è")
        await message.add_reaction("‚ùå")

        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ["‚¨ÖÔ∏è", "‚û°Ô∏è", "‚ùå"] and reaction.message.id == message.id

        try:
            while True:
                reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)

                if str(reaction.emoji) == "‚ùå":
                    await message.delete()
                    return
                elif str(reaction.emoji) == "‚¨ÖÔ∏è":
                    page = max(1, page - 1)
                elif str(reaction.emoji) == "‚û°Ô∏è":
                    page = min(total_pages, page + 1)

                start = (page - 1) * items_per_page
                end = start + items_per_page
                lines = []
                for i, song in enumerate(state.queue[start:end], start=start + 1):
                    duration = format_duration(song.get('duration', 0))
                    lines.append(f"**{i}.** [`{duration}`] {song['title']} - {song['user'].mention}")

                header = f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å | {len(state.queue)} —Ç—Ä–µ–∫–æ–≤ | {format_duration(total_duration)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
                embed = create_embed(header, "\n".join(lines), color=0xB0C4DE)
                await message.edit(embed=embed)
                await message.remove_reaction(reaction, user)

        except asyncio.TimeoutError:
            await message.clear_reactions()

@bot.command()
async def remove(ctx, arg: str):
    state = get_server_state(ctx.guild.id)
    
    if not state.queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))
    if arg == 'all':
        state.queue.clear()
        await ctx.send(embed=create_embed("–û—á–∏—â–µ–Ω–æ", "–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞."))
    else:
        try:
            index = int(arg) - 1
            if 0 <= index < len(state.queue):
                removed = state.queue.pop(index)
                await ctx.send(embed=create_embed("–£–¥–∞–ª–µ–Ω–æ", f"üóëÔ∏è {removed['title']}"))
            else:
                await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å!"))
        except ValueError:
            await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'"))

@bot.command()
async def skip(ctx):
    state = get_server_state(ctx.guild.id)
    
    if state.voice_client and state.voice_client.is_playing():
        state.voice_client.stop()
        await ctx.send(embed=create_embed("–ü—Ä–æ–ø—É—â–µ–Ω–æ", "‚è≠Ô∏è –ü–µ—Å–Ω—è –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."))
    else:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))

@bot.command()
async def stop(ctx):
    state = get_server_state(ctx.guild.id)
    
    if state.nowplaying_updater:
        state.nowplaying_updater.cancel()
        state.nowplaying_updater = None

    if state.voice_client:
        state.voice_client.stop()
        if state.voice_client.is_connected():
            await state.voice_client.disconnect()
        state.voice_client = None

    state.queue.clear()
    state.current = None
    state.is_radio = False
    state.is_looping = False
    state.is_paused = False
    state.last_playing_message = None

    await ctx.send(embed=create_embed("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω."))

@bot.command()
async def pause(ctx):
    state = get_server_state(ctx.guild.id)
    
    if not state.voice_client or not state.voice_client.is_connected():
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É."))
    if state.voice_client.is_playing():
        state.voice_client.pause()
        state.is_paused = True
        await ctx.send(embed=create_embed("–ü–∞—É–∑–∞", "‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."))
    elif state.voice_client.is_paused():
        state.voice_client.resume()
        state.is_paused = False
        await ctx.send(embed=create_embed("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", "‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ."))
    else:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))

@bot.command()
async def volume(ctx, level: int = None):
    state = get_server_state(ctx.guild.id)
    
    if level is None:
        return await ctx.send(embed=create_embed(
            "–ì—Ä–æ–º–∫–æ—Å—Ç—å",
            f"üîä –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {int(state.current_volume * 100)}%"
        ))
    if not 0 <= level <= 150:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 150"
        ))
    state.current_volume = level / 100
    if state.voice_client and state.voice_client.source:
        state.voice_client.source.volume = state.current_volume
    await ctx.send(embed=create_embed(
        "–ì—Ä–æ–º–∫–æ—Å—Ç—å",
        f"üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: {level}%"
    ))

@bot.command()
async def shuffle(ctx):
    state = get_server_state(ctx.guild.id)
    
    if not state.queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))
    random.shuffle(state.queue)
    await ctx.send(embed=create_embed("–ü–µ—Ä–µ–º–µ—à–∞–Ω–æ", "üîÄ –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞."))

@bot.command()
async def search(ctx, *, query: str):
    state = get_server_state(ctx.guild.id)
    
    if is_valid_url(query):
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `?play`."
        ))

    if state.is_radio:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏–æ –∫–æ–º–∞–Ω–¥–æ–π `?stop`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
        ))

    if not ctx.author.voice:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

    try:
        if not state.voice_client or not state.voice_client.is_connected():
            state.voice_client = await ctx.author.voice.channel.connect()
        elif state.voice_client.channel != ctx.author.voice.channel:
            await state.voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    try:
        results = await run_in_executor(
            lambda: YTDL.extract_info(f"ytsearch4:{query}", download=False)['entries']
        )
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {e}"))

    valid_results = []
    for entry in results:
        if entry and entry.get('url'):
            valid_results.append(entry)

    if not valid_results:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))

    lines = []
    for i, entry in enumerate(valid_results, 1):
        duration = format_duration(entry.get('duration', 0))
        lines.append(f"{i}. [`{duration}`] {entry['title']}")

    embed = create_embed(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
        "\n".join(lines),
        color=0x3498db
    )
    embed.set_footer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω–∞")
    message = await ctx.send(embed=embed)

    reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '‚ùå'][:len(valid_results) + 1]
    for i in range(len(valid_results)):
        await message.add_reaction(reactions[i])
    await message.add_reaction('‚ùå')

    def check(reaction, user):
        return user == ctx.author and str(reaction.emoji) in reactions and reaction.message.id == message.id

    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)
        if str(reaction.emoji) == '‚ùå':
            await message.delete()
            return

        index = reactions.index(str(reaction.emoji))
        if index < len(valid_results):
            entry = valid_results[index]
            url = entry['url']
            title = entry['title']
            duration = entry.get('duration', 0)

            state.queue.append({
                'url': url,
                'title': title,
                'duration': duration,
                'user': ctx.author
            })

            await ctx.send(embed=create_embed(
                "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                f"‚úÖ **{title}** (`{format_duration(duration)}`)\n–î–æ–±–∞–≤–∏–ª: {ctx.author.mention}"
            ))

            if not state.voice_client.is_playing() and not state.is_paused:
                await play_next(ctx)

            await message.delete()
    except asyncio.TimeoutError:
        await message.delete()
        await ctx.send(embed=create_embed("–í—Ä–µ–º—è –≤—ã—à–ª–æ", "–í—ã–±–æ—Ä —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω."))

@bot.command()
async def seek(ctx, seconds_str: str):
    state = get_server_state(ctx.guild.id)
    
    if not state.current or not state.voice_client or not state.voice_client.is_playing():
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))
    if not seconds_str.startswith(('+', '-')):
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `?seek +30` –∏–ª–∏ `?seek -15`"))
    try:
        seconds = int(seconds_str)
    except ValueError:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥"))

    current_position = time.time() - state.start_time
    new_position = max(0, current_position + seconds)
    duration = state.current.get('duration', 0)
    if new_position > duration:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞."))

    state.start_time = time.time() - new_position
    state.is_seeking = True
    try:
        state.voice_client.stop()
        url = state.current['url']
        seek_options = {
            'before_options': f'-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -ss {new_position}',
            'options': '-vn'
        }
        source = discord.FFmpegPCMAudio(url, **seek_options)
        source = discord.PCMVolumeTransformer(source, volume=state.current_volume)

        def after_seek(e):
            state.is_seeking = False
            fut = play_next(ctx)
            asyncio.run_coroutine_threadsafe(fut, bot.loop)

        state.voice_client.play(source, after=after_seek)
        await ctx.send(embed=create_embed("–ü–µ—Ä–µ–º–æ—Ç–∫–∞", f"‚è© –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {format_duration(new_position)}"))
        if state.last_playing_message:
            try:
                progress_bar = create_progress_bar(new_position, duration)
                description = (
                    f"üéµ **{state.current['title']}**\n"
                    f"{progress_bar}\n"
                    f"`{format_duration(new_position)} / {format_duration(duration)}`\n"
                    f"–î–æ–±–∞–≤–∏–ª: {state.current['user'].mention}"
                )
                await state.last_playing_message.edit(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
            except:
                pass
    except Exception as e:
        state.is_seeking = False
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å: {e}"))

@bot.command()
async def playlists(ctx):
    await ctx.send(embed=create_embed("–ü–ª–µ–π–ª–∏—Å—Ç—ã", "üéß –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–ø–ª–µ–π–ª–∏—Å—Ç –≤ –∫–æ–º–∞–Ω–¥—É ?playlist."))

@bot.command()
async def help(ctx):
    embed = create_embed("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", color=0x7B68EE)
    commands_list = [
        ("?pause", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"),
        ("?nowplaying", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"),
        ("?play <–Ω–∞–∑–≤–∞–Ω–∏–µ|URL>", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫"),
        ("?playlist <URL>", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç"),
        ("?queue [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"),
        ("?remove <–ø–æ–∑–∏—Ü–∏—è|all>", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"),
        ("?search <–∑–∞–ø—Ä–æ—Å>", "–ü–æ–∏—Å–∫ –Ω–∞ YouTube (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)"),
        ("?seek <+/-—Å–µ–∫—É–Ω–¥—ã>", "–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"),
        ("?shuffle", "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        ("?skip", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"),
        ("?stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã–π—Ç–∏"),
        ("?volume [0-150]", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"),
        ("?ping", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞"),
        ("?loop", "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞"),
        ("?radio <URL>", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏–æ-–ø–æ—Ç–æ–∫"),
        ("?help", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("?about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ]
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def radio(ctx, url: str):
    state = get_server_state(ctx.guild.id)
    
    if state.voice_client and (state.voice_client.is_playing() or state.voice_client.is_paused()):
        state.voice_client.stop()
    state.queue.clear()
    state.current = None
    state.last_playing_message = None
    state.is_radio = True
    state.is_paused = False
    state.is_looping = False
    try:
        if not ctx.author.voice:
            return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))
        if not state.voice_client or not state.voice_client.is_connected():
            state.voice_client = await ctx.author.voice.channel.connect()
        elif state.voice_client.channel != ctx.author.voice.channel:
            await state.voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    def after_playing(e):
        fut = play_next(ctx)
        asyncio.run_coroutine_threadsafe(fut, bot.loop)

    try:
        source = discord.FFmpegPCMAudio(url, **ffmpeg_options)
        source = discord.PCMVolumeTransformer(source, state.current_volume)
        if state.voice_client:
            state.voice_client.play(source, after=after_playing)
            await ctx.send(embed=create_embed("–†–∞–¥–∏–æ", f"üìª {url}"))
    except Exception as e:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏–æ: {e}"))

@bot.command()
async def loop(ctx):
    state = get_server_state(ctx.guild.id)
    
    state.is_looping = not state.is_looping
    await ctx.send(embed=create_embed("–ü–æ–≤—Ç–æ—Ä", f"üîÅ {'–ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω' if state.is_looping else '–ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω'}"))

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot.run('')