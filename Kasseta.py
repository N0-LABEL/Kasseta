import discord
from discord.ext import commands
import asyncio
import yt_dlp
import datetime
import random
import time
from typing import Optional

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='?', intents=intents, help_command=None)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
queue = []
current = None
voice_client: Optional[discord.VoiceClient] = None
current_volume = 1.0
is_paused = False
is_looping = False
is_radio = False
is_seeking = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–æ—Ç–∫–∏
start_time = 0
last_playing_message = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
ytdl_format_options = {
    'format': 'bestaudio/best',
    'quiet': True,
    'source_address': '0.0.0.0',
    'noplaylist': True,
    'default_search': 'ytsearch',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}
ffmpeg_options = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}
YTDL = yt_dlp.YoutubeDL(ytdl_format_options)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_duration(seconds):
    if seconds < 0:
        return "0:00"
    return str(datetime.timedelta(seconds=int(seconds))).split('.')[0]


def create_embed(title, description=None, color=0x4682B4):
    embed = discord.Embed(title=title, description=description, color=color)
    embed.set_footer(text="–ú–µ–∂—Å–µ—Ä–≤–µ—Ä–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç | –ö–∞—Å—Å–µ—Ç–∞", icon_url="https://world-ocean.ru/images/main/mkrf_icon.png")
    return embed


def create_progress_bar(position, duration, length=15):
    if duration <= 0:
        return ""
    progress = min(1, max(0, position / duration))
    filled = int(progress * length)
    return "[" + "‚ñ¨" * filled + "üîò" + "‚ñ¨" * (length - filled) + "]"


async def play_next(ctx):
    global current, queue, voice_client, is_looping, is_radio, start_time, is_paused, is_seeking, last_playing_message

    if is_paused or is_seeking:
        return

    if is_looping and current:
        track = current
    elif queue:
        track = queue.pop(0)
    else:
        current = None
        is_radio = False
        await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", "–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."))
        return

    current = track
    url = track['url']
    title = track['title']
    user = track['user']
    duration = track.get('duration', 0)
    start_time = time.time()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä
    if not (is_looping and last_playing_message):
        progress_bar = create_progress_bar(0, duration)
        description = (
            f"üéµ **{title}**\n"
            f"{progress_bar}\n"
            f"`00:00 / {format_duration(duration)}`\n"
            f"–î–æ–±–∞–≤–∏–ª: {user.mention}"
        )
        last_playing_message = await ctx.send(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))

    def after_playing(e):
        if not is_seeking:
            fut = play_next(ctx)
            asyncio.run_coroutine_threadsafe(fut, bot.loop)

    try:
        source = discord.FFmpegPCMAudio(url, **ffmpeg_options)
        source = discord.PCMVolumeTransformer(source, volume=current_volume)

        if voice_client:
            voice_client.play(source, after=after_playing)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        fut = play_next(ctx)
        asyncio.run_coroutine_threadsafe(fut, bot.loop)


# –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
@bot.event
async def on_ready():
    activity = discord.Activity(type=discord.ActivityType.listening, name="?help")
    await bot.change_presence(status=discord.Status.idle, activity=activity)
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.command()
async def about(ctx):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    await ctx.send(embed=create_embed(
        "–û –±–æ—Ç–µ",
        "üé∂ –ö–∞—Å—Å–µ—Ç–∞ ‚Äî —ç—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å —à–∏—Ä–æ–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º. "
        "–£–º–µ–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º—É–∑—ã–∫—É —Å YouTube, –ø–ª–µ–π–ª–∏—Å—Ç—ã, –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å—é, "
        "–æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞.\n  \n**–°–¥–µ–ª–∞–Ω–æ –≤ –í–§**"
    ))

@bot.command()
async def ping(ctx):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞"""
    latency = round(bot.latency * 1000)
    await ctx.send(embed=create_embed("–ü–∏–Ω–≥", f"üì° {latency}ms"))


@bot.command()
async def play(ctx, *, search: str):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç"""
    global voice_client, is_radio, is_paused, queue, current, last_playing_message

    if is_radio:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏–æ –∫–æ–º–∞–Ω–¥–æ–π `?stop`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
        ))

    is_paused = False

    if not ctx.author.voice:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

    try:
        if not voice_client or not voice_client.is_connected():
            voice_client = await ctx.author.voice.channel.connect()
        elif voice_client.channel != ctx.author.voice.channel:
            await voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    try:
        info = YTDL.extract_info(search, download=False)
        if 'entries' in info:
            if info['entries']:
                info = info['entries'][0]
            else:
                return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."))

        url = info['url']
        title = info['title']
        duration = info.get('duration', 0)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫: {e}"))

    queue.append({
        'url': url,
        'title': title,
        'duration': duration,
        'user': ctx.author
    })

    await ctx.send(embed=create_embed(
        "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
        f"‚úÖ **{title}** (`{format_duration(duration)}`)\n–î–æ–±–∞–≤–∏–ª: {ctx.author.mention}"
    ))

    if not voice_client.is_playing() and not is_paused:
        await play_next(ctx)


@bot.command()
async def radio(ctx, url: str):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏–æ-–ø–æ—Ç–æ–∫"""
    global voice_client, is_radio, current, is_paused, queue, last_playing_message

    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
    if voice_client and (voice_client.is_playing() or voice_client.is_paused()):
        voice_client.stop()
    queue.clear()
    current = None
    last_playing_message = None
    is_radio = True
    is_paused = False
    is_looping = False

    try:
        if not ctx.author.voice:
            return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

        if not voice_client or not voice_client.is_connected():
            voice_client = await ctx.author.voice.channel.connect()
        elif voice_client.channel != ctx.author.voice.channel:
            await voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    def after_playing(e):
        fut = play_next(ctx)
        asyncio.run_coroutine_threadsafe(fut, bot.loop)

    try:
        source = discord.FFmpegPCMAudio(url, **ffmpeg_options)
        source = discord.PCMVolumeTransformer(source, current_volume)

        if voice_client:
            voice_client.play(source, after=after_playing)
            await ctx.send(embed=create_embed("–†–∞–¥–∏–æ", f"üìª {url}"))
    except Exception as e:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏–æ: {e}"))


@bot.command()
async def loop(ctx):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞"""
    global is_looping
    is_looping = not is_looping
    await ctx.send(embed=create_embed("–ü–æ–≤—Ç–æ—Ä", f"üîÅ {'–ü–æ–≤—Ç–æ—Ä –≤–∫–ª—é—á—ë–Ω' if is_looping else '–ü–æ–≤—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω'}"))


@bot.command()
async def nowplaying(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
    global last_playing_message

    if current:
        position = time.time() - start_time if not is_paused else current.get('position', 0)
        duration = current.get('duration', 0)

        progress_bar = create_progress_bar(position, duration)
        description = (
            f"üéµ **{current['title']}**\n"
            f"{progress_bar}\n"
            f"`{format_duration(position)} / {format_duration(duration)}`\n"
            f"–î–æ–±–∞–≤–∏–ª: {current['user'].mention}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        if last_playing_message:
            try:
                await last_playing_message.edit(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
                return
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

        last_playing_message = await ctx.send(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
    else:
        await ctx.send(embed=create_embed("–ü—É—Å—Ç–æ", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))


@bot.command(name='queue')
async def queue_(ctx, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    if not queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))

    items_per_page = 10
    total_pages = max(1, (len(queue) + items_per_page - 1) // items_per_page)
    page = max(1, min(page, total_pages))

    start = (page - 1) * items_per_page
    end = start + items_per_page

    lines = []
    for i, song in enumerate(queue[start:end], start=start + 1):
        duration = format_duration(song.get('duration', 0))
        lines.append(f"**{i}.** [`{duration}`] {song['title']} - {song['user'].mention}")

    total_duration = sum(song.get('duration', 0) for song in queue)
    header = f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å | {len(queue)} —Ç—Ä–µ–∫–æ–≤ | {format_duration(total_duration)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    await ctx.send(embed=create_embed(header, "\n".join(lines), color=0xB0C4DE))


@bot.command()
async def remove(ctx, arg: str):
    """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    global queue

    if not queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))

    if arg == 'all':
        queue.clear()
        await ctx.send(embed=create_embed("–û—á–∏—â–µ–Ω–æ", "–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞."))
    else:
        try:
            index = int(arg) - 1
            if 0 <= index < len(queue):
                removed = queue.pop(index)
                await ctx.send(embed=create_embed("–£–¥–∞–ª–µ–Ω–æ", f"üóëÔ∏è {removed['title']}"))
            else:
                await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å!"))
        except ValueError:
            await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'"))


@bot.command()
async def skip(ctx):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await ctx.send(embed=create_embed("–ü—Ä–æ–ø—É—â–µ–Ω–æ", "‚è≠Ô∏è –ü–µ—Å–Ω—è –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."))
    else:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))


@bot.command()
async def stop(ctx):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
    global voice_client, queue, current, is_radio, is_looping, is_paused, last_playing_message
    if voice_client:
        if voice_client.is_playing() or voice_client.is_paused():
            voice_client.stop()
        if voice_client.is_connected():
            await voice_client.disconnect()
        voice_client = None

    queue.clear()
    current = None
    is_radio = False
    is_looping = False
    is_paused = False
    last_playing_message = None

    await ctx.send(embed=create_embed("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."))


@bot.command()
async def pause(ctx):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
    global is_paused

    if not voice_client or not voice_client.is_connected():
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É."))

    if voice_client.is_playing():
        voice_client.pause()
        is_paused = True
        await ctx.send(embed=create_embed("–ü–∞—É–∑–∞", "‚è∏Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."))
    elif voice_client.is_paused():
        voice_client.resume()
        is_paused = False
        await ctx.send(embed=create_embed("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", "‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ."))
    else:
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))


@bot.command()
async def volume(ctx, level: int = None):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å (0-150)"""
    global current_volume

    if level is None:
        return await ctx.send(embed=create_embed(
            "–ì—Ä–æ–º–∫–æ—Å—Ç—å",
            f"üîä –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {int(current_volume * 100)}%"
        ))

    if not 0 <= level <= 150:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 150"
        ))

    current_volume = level / 100

    if voice_client and voice_client.source:
        voice_client.source.volume = current_volume

    await ctx.send(embed=create_embed(
        "–ì—Ä–æ–º–∫–æ—Å—Ç—å",
        f"üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: {level}%"
    ))


@bot.command()
async def shuffle(ctx):
    """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"""
    if not queue:
        return await ctx.send(embed=create_embed("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"))

    random.shuffle(queue)
    await ctx.send(embed=create_embed("–ü–µ—Ä–µ–º–µ—à–∞–Ω–æ", "üîÄ –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞."))


@bot.command()
async def search(ctx, *, query: str):
    """–ü–æ–∏—Å–∫ –Ω–∞ YouTube —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"""
    global voice_client

    if is_radio:
        return await ctx.send(embed=create_embed(
            "–û—à–∏–±–∫–∞",
            "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç —Ä–∞–¥–∏–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–¥–∏–æ –∫–æ–º–∞–Ω–¥–æ–π `?stop`, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
        ))

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    if not ctx.author.voice:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."))

    try:
        if not voice_client or not voice_client.is_connected():
            voice_client = await ctx.author.voice.channel.connect()
        elif voice_client.channel != ctx.author.voice.channel:
            await voice_client.move_to(ctx.author.voice.channel)
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"{e}"))

    # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
    try:
        results = YTDL.extract_info(f"ytsearch4:{query}", download=False)['entries']
    except Exception as e:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {e}"))

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º
    lines = []
    for i, entry in enumerate(results, 1):
        duration = format_duration(entry.get('duration', 0))
        lines.append(f"{i}. [`{duration}`] {entry['title']}")

    embed = create_embed(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
        "\n".join(lines),
        color=0x3498db
    )
    embed.set_footer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    message = await ctx.send(embed=embed)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
    reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '‚ùå']
    for i in range(min(len(results), 4)):
        await message.add_reaction(reactions[i])
    await message.add_reaction('‚ùå')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    def check(reaction, user):
        return user == ctx.author and str(reaction.emoji) in reactions and reaction.message.id == message.id

    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=60.0, check=check)

        if str(reaction.emoji) == '‚ùå':
            await message.delete()
            return

        index = reactions.index(str(reaction.emoji))
        if index < len(results):
            entry = results[index]
            url = entry['url']
            title = entry['title']
            duration = entry.get('duration', 0)

            queue.append({
                'url': url,
                'title': title,
                'duration': duration,
                'user': ctx.author
            })

            await ctx.send(embed=create_embed(
                "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                f"‚úÖ **{title}** (`{format_duration(duration)}`)\n–î–æ–±–∞–≤–∏–ª: {ctx.author.mention}"
            ))

            if not voice_client.is_playing() and not is_paused:
                await play_next(ctx)

            await message.delete()

    except asyncio.TimeoutError:
        await message.delete()
        await ctx.send(embed=create_embed("–í—Ä–µ–º—è –≤—ã—à–ª–æ", "–í—ã–±–æ—Ä —Ç—Ä–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω."))


@bot.command()
async def seek(ctx, seconds_str: str):
    """–ü–µ—Ä–µ–º–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ (+–≤–ø–µ—Ä–µ–¥/-–Ω–∞–∑–∞–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
    global current, start_time, voice_client, is_seeking, last_playing_message

    if not current or not voice_client or not voice_client.is_playing():
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not seconds_str.startswith(('+', '-')):
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `?seek +30` –∏–ª–∏ `?seek -15`"))

    try:
        seconds = int(seconds_str)
    except ValueError:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥"))

    # –†–∞—Å—Å—á–µ—Ç –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    current_position = time.time() - start_time
    new_position = max(0, current_position + seconds)
    duration = current.get('duration', 0)

    if new_position > duration:
        return await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", "–í—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞."))

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    start_time = time.time() - new_position

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø–µ—Ä–µ–º–æ—Ç–∫–∏
    is_seeking = True
    try:
        voice_client.stop()
        url = current['url']

        seek_options = {
            'before_options': f'-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -ss {new_position}',
            'options': '-vn'
        }

        source = discord.FFmpegPCMAudio(url, **seek_options)
        source = discord.PCMVolumeTransformer(source, volume=current_volume)

        def after_seek(e):
            # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–º–æ—Ç–∫–∏
            global is_seeking
            is_seeking = False
            fut = play_next(ctx)
            asyncio.run_coroutine_threadsafe(fut, bot.loop)

        voice_client.play(source, after=after_seek)
        await ctx.send(embed=create_embed("–ü–µ—Ä–µ–º–æ—Ç–∫–∞", f"‚è© –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {format_duration(new_position)}"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        if last_playing_message:
            try:
                progress_bar = create_progress_bar(new_position, duration)
                description = (
                    f"üéµ **{current['title']}**\n"
                    f"{progress_bar}\n"
                    f"`{format_duration(new_position)} / {format_duration(duration)}`\n"
                    f"–î–æ–±–∞–≤–∏–ª: {current['user'].mention}"
                )
                await last_playing_message.edit(embed=create_embed("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç", description))
            except:
                pass
    except Exception as e:
        is_seeking = False  # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await ctx.send(embed=create_embed("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å: {e}"))


@bot.command()
async def playlists(ctx):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–∞—Ö"""
    await ctx.send(embed=create_embed("–ü–ª–µ–π–ª–∏—Å—Ç—ã", "üéß –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–ø–ª–µ–π–ª–∏—Å—Ç –≤ –∫–æ–º–∞–Ω–¥—É ?play."))


@bot.command()
async def help(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
    embed = create_embed("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", color=0x7B68EE)

    commands_list = [
        ("?pause", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"),
        ("?nowplaying", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"),
        ("?play <–Ω–∞–∑–≤–∞–Ω–∏–µ|URL>", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç"),
        ("?queue [—Å—Ç—Ä–∞–Ω–∏—Ü–∞]", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"),
        ("?remove <–ø–æ–∑–∏—Ü–∏—è|all>", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"),
        ("?search <–∑–∞–ø—Ä–æ—Å>", "–ü–æ–∏—Å–∫ –Ω–∞ YouTube —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º"),
        ("?seek <+/-—Å–µ–∫—É–Ω–¥—ã>", "–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"),
        ("?shuffle", "–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        ("?skip", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"),
        ("?stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"),
        ("?volume [0-150]", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"),
        ("?ping", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞"),
        ("?loop", "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞"),
        ("?radio <URL>", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞–¥–∏–æ-–ø–æ—Ç–æ–∫"),
        ("?help", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("?about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    ]

    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)

    await ctx.send(embed=embed)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot.run('')

